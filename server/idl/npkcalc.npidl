// Copyright (c) 2022 nikitapnn1@gmail.com
// This file is a part of Nikita's NPK calculator and covered by LICENSING file in the topmost directory

namespace npkcalc {

enum ELEMENT { 
	N_NO3, N_NH4, P, K, Ca, Mg, S, Cl, Fe, Zn, B, Mn, Cu, Mo, 
	CO3, _P1, _P2, _P3, _P4, _P5, _P6, _P7, _P8, 
	H, O, C, NH4, NO3, SO4, H2PO4
};

Solution: flat {
	id: u32;
	name: string;
	owner: string;
	elements: float64[14];
}

enum FertilizerBottle: u8 {
	BOTTLE_A,
	BOTTLE_B,
	BOTTLE_C
};

enum FertilizerType: u8 {
	DRY,
	LIQUID,
	SOLUTION,
};

Fertilizer: flat {
	id: u32;
	name: string;
	owner: string;
	formula: string;
}

TargetElement : flat {
	value: float64;
	value_base: float64;
	ratio: float64;
}

Calculation: flat {
	id: u32;
	name: string;
	elements: TargetElement[14];
	fertilizers_ids: vector<u32>;
	volume: float64;
	mode: boolean;
}

Media: flat {
	name: string;
	data: vector<u8>;
}

enum AuthorizationFailed_Reason: u8 {
	email_does_not_exist,
	incorrect_password,
	session_does_not_exist
}

AuthorizationFailed: exception {
	reason: AuthorizationFailed_Reason;
}

enum RegistrationFailed_Reason: u8 {
	username_already_exist,
	email_already_registered,
	incorrect_code,
	invalid_username
}

RegistrationFailed: exception {
	reason: RegistrationFailed_Reason;
}

PermissionViolation: exception {
	msg: string;
}

UserData: flat {
	name: string;
	session_id: string;
	db: object; 
}

SolutionElement: flat {
	index: u32;
	value: float64;
}

enum AlarmType {
	Info,
	Warning,
	Critical
}

Alarm: flat {
	id: u32;
	type: AlarmType;
	msg: string;
}

enum ChatAttachmentType {
	Picture,
	File
}

ChatAttachment: flat {
	type: ChatAttachmentType;
	name: string;
	data: vector<u8>;
}

ChatMessage: flat {
	timestamp: u32;
	str: string;
	attachment?: ChatAttachment;
}

Vector3: flat {
	x: float32;
	y: float32;
	z: float32;
}

Vector2: flat {
	x: float32;
	y: float32;
}

Footstep: flat {
	color: Vector3;
	idx: u32;
	pos: Vector2;
	dir: Vector2;
}


[trusted=false]
interface Authorizator {
	UserData LogIn(login: in string, password: in string) raises(AuthorizationFailed);
	UserData LogInWithSessionId(session_id: in string) raises(AuthorizationFailed);
	boolean LogOut(session_id: in string);
	
	boolean CheckUsername(username: in string);
	boolean CheckEmail(email: in string);
	void RegisterStepOne(username: in string, email: in string, password: in string) raises(RegistrationFailed);
	void RegisterStepTwo(username: in string, code: in u32) raises(RegistrationFailed);
}

[trusted=false]
interface RegisteredUser {
	void GetMyCalculations(calculations: out direct vector<Calculation>);
	
	u32 AddSolution(name: in string, elements: in float64[14]);
	void SetSolutionName(id: in u32, name: in string) raises(PermissionViolation);
	void SetSolutionElements(id: in u32, name: in vector<SolutionElement>) raises(PermissionViolation);
	void DeleteSolution(id: in u32) raises(PermissionViolation);
	
	u32 AddFertilizer(name: in string, formula: in string);
	void SetFertilizerName(id: in u32, name: in string) raises(PermissionViolation);
	void SetFertilizerFormula(id: in u32, name: in string) raises(PermissionViolation);
	void DeleteFertilizer(id: in u32) raises(PermissionViolation);
	void SaveData();
	
	u32 UpdateCalculation(calculation: in Calculation);
	void DeleteCalculation(id: in u32);
}

interface DataObserver {
	void DataChanged(idx: in u32);
	void OnAlarm(alarm: in Alarm);
	void OnFootstep(footstep: in Footstep);
}

[trusted=false]
interface Chat {
	void Connect(obj: in object);
	boolean	Send(msg: in ChatMessage);
}

interface ChatParticipant {
	void OnMessage(msg: in ChatMessage);
}

[trusted=false]
interface Calculator {
	void GetData(solutions: out direct vector<Solution>, fertilizers: out direct vector<Fertilizer>);
	void GetImages(images: out direct vector<Media>);
	void Subscribe(obj: in object);
	void GetGuestCalculations(calculations: out direct vector<Calculation>);
	void SendFootstep(footstep: in Footstep);
}

}