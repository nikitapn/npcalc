/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7,11,13,14,16,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33],$V1=[7,18,19,22,23,24,25,26,27,28,29,30,31,32,38,40,43,46,47,48,49,50,51,52,53],$V2=[2,37],$V3=[1,36],$V4=[1,37],$V5=[1,41],$V6=[1,40],$V7=[1,43],$V8=[1,44],$V9=[7,38,40],$Va=[1,58],$Vb=[1,59],$Vc=[1,65],$Vd=[1,68],$Ve=[1,69],$Vf=[1,62],$Vg=[1,66],$Vh=[1,67],$Vi=[1,70],$Vj=[1,75],$Vk=[1,71],$Vl=[1,74],$Vm=[1,76],$Vn=[1,56],$Vo=[1,57],$Vp=[1,60],$Vq=[1,61],$Vr=[1,63],$Vs=[1,64],$Vt=[1,72],$Vu=[1,73],$Vv=[1,77],$Vw=[7,18,19,22,23,24,25,26,27,28,29,30,31,32,38,40,43,44,46,47,48,49,50,51,52,53,54,55,56,57],$Vx=[1,82],$Vy=[1,80],$Vz=[1,81],$VA=[1,83],$VB=[1,84],$VC=[7,40,44,54,55,56,57],$VD=[7,18,19,22,23,24,25,26,27,28,29,30,31,32,38,40,43,44,46,47,48,49,50,51,52,53],$VE=[2,40],$VF=[1,94],$VG=[7,44,54,55],$VH=[7,40,44,54,55,56];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"script":3,"stmt_list":4,"stmt":5,"substance":6,";":7,"directly":8,"ASSIGNMENT":9,"number":10,"SOLUTION":11,"exp":12,"DESITY":13,"BOTTLE":14,"bottle":15,"COST":16,"A":17,"B":18,"C":19,"N_NO3":20,"N_NH4":21,"P":22,"K":23,"Ca":24,"Mg":25,"S":26,"Cl":27,"Fe":28,"Zn":29,"Mn":30,"Cu":31,"Mo":32,"FORMULA":33,"formula_list":34,"purity_clause":35,"DECIMAL":36,"INTEGER":37,"PURITY":38,"molecula_stmt0":39,"*":40,"formula_stmt0":41,"formula_stmt1":42,"(":43,")":44,"count":45,"H":46,"N":47,"O":48,"Al":49,"Si":50,"Co":51,"Ni":52,"Ag":53,"+":54,"-":55,"/":56,"^":57,"E":58,"PI":59,"$accept":0,"$end":1},
terminals_: {2:"error",7:";",9:"ASSIGNMENT",11:"SOLUTION",13:"DESITY",14:"BOTTLE",16:"COST",17:"A",18:"B",19:"C",20:"N_NO3",21:"N_NH4",22:"P",23:"K",24:"Ca",25:"Mg",26:"S",27:"Cl",28:"Fe",29:"Zn",30:"Mn",31:"Cu",32:"Mo",33:"FORMULA",36:"DECIMAL",37:"INTEGER",38:"PURITY",40:"*",43:"(",44:")",46:"H",47:"N",48:"O",49:"Al",50:"Si",51:"Co",52:"Ni",53:"Ag",54:"+",55:"-",56:"/",57:"^",58:"E",59:"PI"},
productions_: [0,[3,1],[4,0],[4,2],[5,2],[5,4],[5,4],[5,4],[5,4],[5,4],[5,1],[15,1],[15,1],[15,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[6,3],[10,1],[10,1],[35,0],[35,2],[34,1],[34,3],[39,2],[39,1],[41,0],[41,2],[41,5],[45,0],[45,1],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[42,2],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,3],[12,1],[12,1],[12,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */, ctx) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new ctx.Ast_Script($$[$0]); 
break;
case 2:
 this.$ = new ctx.Ast_StmtList(); 
break;
case 3:
 this.$ = $$[$0-1];  if ($$[$0] !== null) this.$.push($$[$0]); 
break;
case 4:
 this.$ = $$[$0-1]; 
break;
case 5:
 this.$ = new ctx.Ast_AssignmentDirectly($$[$0-3], $$[$0-1]); 
break;
case 6:
 this.$ = new ctx.Ast_AssignmentSolution($$[$0-1]); 
break;
case 7:
 this.$ = new ctx.Ast_AssignmentDensity($$[$0-1]); 
break;
case 8:
 this.$ = new ctx.Ast_AssignmentBottle($$[$0-1]); 
break;
case 9:
 this.$ = new ctx.Ast_AssignmentCost($$[$0-1]); 
break;
case 10: case 31:
 this.$ = null; 
break;
case 11: case 14:
 this.$ = 0; 
break;
case 12: case 15: case 40:
 this.$ = 1; 
break;
case 13: case 16:
 this.$ = 2; 
break;
case 17:
 this.$ = 3; 
break;
case 18:
 this.$ = 4; 
break;
case 19:
 this.$ = 5; 
break;
case 20:
 this.$ = 6; 
break;
case 21:
 this.$ = 7; 
break;
case 22:
 this.$ = 8; 
break;
case 23:
 this.$ = 9; 
break;
case 24:
 this.$ = 10; 
break;
case 25:
 this.$ = 11; 
break;
case 26:
 this.$ = 12; 
break;
case 27:
 this.$ = 13; 
break;
case 28:
 this.$ = new ctx.Ast_Substance($$[$0-1], $$[$0]); if($$[$0] !== null && ($$[$0] > 100.0 || $$[$0] < 0.0)) throw "invalid purity value \"" + $$[$0] + "\" at line: " + yylineno;  
break;
case 29:
 this.$ = parseFloat($$[$0]); 
break;
case 30: case 41:
 this.$ = parseInt($$[$0]); 
break;
case 32:
 this.$ = $$[$0]; 
break;
case 33:
 this.$ = new ctx.Ast_ExprSingle($$[$0]); 
break;
case 34:
 this.$ = new ctx.Ast_ExprNode($$[$0-2], $$[$0]); 
break;
case 35:
 this.$ = new ctx.Ast_Molecule($$[$0], $$[$0-1]); 
break;
case 36:
 this.$ = new ctx.Ast_Molecule($$[$0], 1); 
break;
case 37:
 this.$ = new ctx.Ast_Formula(); 
break;
case 38:
 this.$.push(new ctx.Ast_Atom($$[$0])); 
break;
case 39:
 this.$.push(new ctx.Ast_Group($$[$0-2], $$[$0])); 
break;
case 42:
 this.$ = [1, $$[$0]]; 
break;
case 43:
 this.$ = [5, $$[$0]]; 
break;
case 44:
 this.$ = [6, $$[$0]]; 
break;
case 45:
 this.$ = [7, $$[$0]]; 
break;
case 46:
 this.$ = [8, $$[$0]]; 
break;
case 47:
 this.$ = [12, $$[$0]]; 
break;
case 48:
 this.$ = [13, $$[$0]]; 
break;
case 49:
 this.$ = [14, $$[$0]]; 
break;
case 50:
 this.$ = [15, $$[$0]]; 
break;
case 51:
 this.$ = [16, $$[$0]]; 
break;
case 52:
 this.$ = [17, $$[$0]]; 
break;
case 53:
 this.$ = [19, $$[$0]]; 
break;
case 54:
 this.$ = [20, $$[$0]]; 
break;
case 55:
 this.$ = [26, $$[$0]]; 
break;
case 56:
 this.$ = [25, $$[$0]]; 
break;
case 57:
 this.$ = [27, $$[$0]]; 
break;
case 58:
 this.$ = [28, $$[$0]]; 
break;
case 59:
 this.$ = [29, $$[$0]]; 
break;
case 60:
 this.$ = [30, $$[$0]]; 
break;
case 61:
 this.$ = [42, $$[$0]]; 
break;
case 62:
 this.$ = [47, $$[$0]]; 
break;
case 63:
this.$ = $$[$0-2]+$$[$0];
break;
case 64:
this.$ = $$[$0-2]-$$[$0];
break;
case 65:
this.$ = $$[$0-2]*$$[$0];
break;
case 66:
this.$ = $$[$0-2]/$$[$0];
break;
case 67:
this.$ = Math.pow($$[$0-2], $$[$0]);
break;
case 68:
this.$ = -$$[$0];
break;
case 69:
this.$ = $$[$0-1];
break;
case 70:
this.$ = $$[$0];
break;
case 71:
this.$ = Math.E;
break;
case 72:
this.$ = Math.PI;
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},{1:[2,1],5:3,6:4,7:[1,10],8:5,11:[1,6],13:[1,7],14:[1,8],16:[1,9],18:[1,22],20:[1,12],21:[1,13],22:[1,14],23:[1,15],24:[1,16],25:[1,17],26:[1,18],27:[1,19],28:[1,20],29:[1,21],30:[1,23],31:[1,24],32:[1,25],33:[1,11]},o($V0,[2,3]),{7:[1,26]},{9:[1,27]},{9:[1,28]},{9:[1,29]},{9:[1,30]},{9:[1,31]},o($V0,[2,10]),o($V1,$V2,{34:32,39:33,10:34,41:35,36:$V3,37:$V4}),{9:[2,14]},{9:[2,15]},{9:[2,16]},{9:[2,17]},{9:[2,18]},{9:[2,19]},{9:[2,20]},{9:[2,21]},{9:[2,22]},{9:[2,23]},{9:[2,24]},{9:[2,25]},{9:[2,26]},{9:[2,27]},o($V0,[2,4]),{10:38,36:$V3,37:$V4},{10:42,12:39,36:$V3,37:$V4,43:$V5,55:$V6,58:$V7,59:$V8},{10:42,12:45,36:$V3,37:$V4,43:$V5,55:$V6,58:$V7,59:$V8},{15:46,17:[1,47],18:[1,48],19:[1,49]},{10:50,36:$V3,37:$V4},{7:[2,31],35:51,38:[1,53],40:[1,52]},o($V9,[2,33]),o($V1,$V2,{41:54}),o($V9,[2,36],{42:55,18:$Va,19:$Vb,22:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,43:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv}),o($Vw,[2,29]),o($Vw,[2,30]),{7:[1,78]},{7:[1,79],40:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{10:42,12:85,36:$V3,37:$V4,43:$V5,55:$V6,58:$V7,59:$V8},{10:42,12:86,36:$V3,37:$V4,43:$V5,55:$V6,58:$V7,59:$V8},o($VC,[2,70]),o($VC,[2,71]),o($VC,[2,72]),{7:[1,87],40:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{7:[1,88]},{7:[2,11]},{7:[2,12]},{7:[2,13]},{7:[1,89]},{7:[2,28]},o($V1,$V2,{39:33,10:34,41:35,34:90,36:$V3,37:$V4}),{10:91,36:$V3,37:$V4},o($V9,[2,35],{42:55,18:$Va,19:$Vb,22:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,43:$Vn,46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv}),o($VD,[2,38]),o([18,19,22,23,24,25,26,27,28,29,30,31,32,43,44,46,47,48,49,50,51,52,53],$V2,{41:92}),o($VD,$VE,{45:93,37:$VF}),o($VD,$VE,{45:95,37:$VF}),o($VD,$VE,{45:96,37:$VF}),o($VD,$VE,{45:97,37:$VF}),o($VD,$VE,{45:98,37:$VF}),o($VD,$VE,{45:99,37:$VF}),o($VD,$VE,{45:100,37:$VF}),o($VD,$VE,{45:101,37:$VF}),o($VD,$VE,{45:102,37:$VF}),o($VD,$VE,{45:103,37:$VF}),o($VD,$VE,{45:104,37:$VF}),o($VD,$VE,{45:105,37:$VF}),o($VD,$VE,{45:106,37:$VF}),o($VD,$VE,{45:107,37:$VF}),o($VD,$VE,{45:108,37:$VF}),o($VD,$VE,{45:109,37:$VF}),o($VD,$VE,{45:110,37:$VF}),o($VD,$VE,{45:111,37:$VF}),o($VD,$VE,{45:112,37:$VF}),o($VD,$VE,{45:113,37:$VF}),o($VD,$VE,{45:114,37:$VF}),o($V0,[2,5]),o($V0,[2,6]),{10:42,12:115,36:$V3,37:$V4,43:$V5,55:$V6,58:$V7,59:$V8},{10:42,12:116,36:$V3,37:$V4,43:$V5,55:$V6,58:$V7,59:$V8},{10:42,12:117,36:$V3,37:$V4,43:$V5,55:$V6,58:$V7,59:$V8},{10:42,12:118,36:$V3,37:$V4,43:$V5,55:$V6,58:$V7,59:$V8},{10:42,12:119,36:$V3,37:$V4,43:$V5,55:$V6,58:$V7,59:$V8},o($VC,[2,68]),{40:$Vx,44:[1,120],54:$Vy,55:$Vz,56:$VA,57:$VB},o($V0,[2,7]),o($V0,[2,8]),o($V0,[2,9]),o($V9,[2,34]),{7:[2,32]},{18:$Va,19:$Vb,22:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,42:55,43:$Vn,44:[1,121],46:$Vo,47:$Vp,48:$Vq,49:$Vr,50:$Vs,51:$Vt,52:$Vu,53:$Vv},o($VD,[2,42]),o($VD,[2,41]),o($VD,[2,43]),o($VD,[2,44]),o($VD,[2,45]),o($VD,[2,46]),o($VD,[2,47]),o($VD,[2,48]),o($VD,[2,49]),o($VD,[2,50]),o($VD,[2,51]),o($VD,[2,52]),o($VD,[2,53]),o($VD,[2,54]),o($VD,[2,55]),o($VD,[2,56]),o($VD,[2,57]),o($VD,[2,58]),o($VD,[2,59]),o($VD,[2,60]),o($VD,[2,61]),o($VD,[2,62]),o($VG,[2,63],{40:$Vx,56:$VA,57:$VB}),o($VG,[2,64],{40:$Vx,56:$VA,57:$VB}),o($VH,[2,65],{57:$VB}),o($VH,[2,66],{57:$VB}),o($VC,[2,67]),o($VC,[2,69]),o($VD,$VE,{45:122,37:$VF}),o($VD,[2,39])],
defaultActions: {12:[2,14],13:[2,15],14:[2,16],15:[2,17],16:[2,18],17:[2,19],18:[2,20],19:[2,21],20:[2,22],21:[2,23],22:[2,24],23:[2,25],24:[2,26],25:[2,27],47:[2,11],48:[2,12],49:[2,13],51:[2,28],91:[2,32]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 36;
break;
case 2:return 37
break;
case 3:return 9;
break;
case 4:return 7;
break;
case 5:return 33;
break;
case 6:return 38;
break;
case 7:return 13;
break;
case 8:return 11;
break;
case 9:return 14;
break;
case 10:return 16;
break;
case 11:return 24;
break;
case 12:return 25;
break;
case 13:return 27;
break;
case 14:return 28;
break;
case 15:return 30;
break;
case 16:return 29;
break;
case 17:return 31;
break;
case 18:return 32;
break;
case 19:return 52;
break;
case 20:return 50;
break;
case 21:return 51;
break;
case 22:return 53;
break;
case 23:return 49;
break;
case 24:return 20;
break;
case 25:return 21;
break;
case 26:return 48;
break;
case 27:return 46;
break;
case 28:return 47;
break;
case 29:return 22;
break;
case 30:return 23;
break;
case 31:return 26;
break;
case 32:return 17;
break;
case 33:return 18;
break;
case 34:return 19;
break;
case 35:return 40;
break;
case 36:return 56;
break;
case 37:return 55;
break;
case 38:return 54;
break;
case 39:return 57;
break;
case 40:return 43;
break;
case 41:return 44;
break;
case 42:return 59;
break;
case 43:return 58;
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]*\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:(:=))/,/^(?:(;))/,/^(?:formula\b)/,/^(?:purity\b)/,/^(?:density\b)/,/^(?:solution\b)/,/^(?:bottle\b)/,/^(?:cost\b)/,/^(?:(Ca))/,/^(?:(Mg))/,/^(?:(Cl))/,/^(?:(Fe))/,/^(?:(Mn))/,/^(?:(Zn))/,/^(?:(Cu))/,/^(?:(Mo))/,/^(?:(Ni))/,/^(?:(Si))/,/^(?:(Co))/,/^(?:(Ag))/,/^(?:(Al))/,/^(?:(N-NO3))/,/^(?:(N-NH4))/,/^(?:(O))/,/^(?:(H))/,/^(?:(N))/,/^(?:(P))/,/^(?:(K))/,/^(?:(S))/,/^(?:(A))/,/^(?:(B))/,/^(?:(C))/,/^(?:[\*|•])/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };

if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}